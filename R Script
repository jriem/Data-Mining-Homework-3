######################################################################
####################Loading the datasets##############################

##Setting the directory where the input file is present
setwd("~/Desktop/70374/hw3")


##Loading the credit_data from the "credit_data.csv" file, converting unknown values to 'NA' and loadings the strings as factors
credit_data                       <- read.csv("credit_data.csv", stringsAsFactors = TRUE)

##create ordered factor variables by using the function ordered. 
##This function has the same arguments as the factor function. 
##Converting categorical variables to ordinal variables so that there is clear ordering of the variables for analysis

credit_data$credit_history       <- ordered(credit_data$credit_history, levels = c("critical", "poor", "good","very good","perfect"))
credit_data$employment_duration  <- ordered(credit_data$employment_duration, levels = c("unemployed" , "< 1 year", 
                                                                                        "1 - 4 years", "4 - 7 years","> 7 years"))


######################################################################
##############################Part B##################################

#####Question 1 and 2#####
##Installing and Loading the "caret" library. It includes the functions to implement knn algorithm
#install.packages("caret")
library(caret)

##default with '~' indicates it is a predictor,
##data defines the input data, method argument defines the type of classification or regression model used, 
##preprocess argument specifies to center and scale the predictors, tuneGrid defines the possible tuning values , in this cas is the k values between 1 to 50
##trConrtol parameter defines the resampling method, here we are using 10-fold crosss validation, 
##the seed function is used pseudo-random number generation.The seed number you choose is the starting point used in the generation of a sequence of random numbers, 
##which is why (provided you use the same pseudo-random number generator) you'll obtain the same results given the same seed number.
set.seed(100)
knn_credit             <- train(default ~ ., data=credit_data, method = "knn",
                                preProcess = c("center", "scale"), tuneGrid=expand.grid(k=1:50),
                                trControl = trainControl(method = "cv", number=10))

##ploting the accuracies of K nearest neighbor implemented for k=1 to 50
plot(knn_credit)
knn_credit
#generating the confusion matrix for the k nearest neighbor implemented with k having the highest accuracy
knnPredict            <- predict(knn_credit,credit_data)
confusionMatrix(knnPredict, credit_data$default)


######################################################################
##############################Part C##################################

#####Question 1#####

##implementing C5.0 on the dataset

set.seed(100)
C5.0_credit             <- train(default ~ ., data=credit_data, method = "C5.0",
                                 preProcess = c("center", "scale"), 
                                 tuneGrid = expand.grid( .winnow = c(TRUE,FALSE), .trials=1, .model="tree" ),
                                 trControl = trainControl(method = "cv", number=10))

##generating the confusion matrix for the C5.0 classification implemented in the above step
C5.0Predict             <- predict(C5.0_credit,newdata = credit_data)
confusionMatrix(C5.0Predict, credit_data$default)



##implementing Support vector machine on the dataset
set.seed(23)
svm_credit            <- train(default ~ ., data=credit_data, method = "svmLinear",
                               preProcess = c("center", "scale"),
                               trControl = trainControl(method = "cv", number=10,classProbs =  TRUE))

#generating the confusion matrix for the support vector machine implemented in the above step
svmPredict            <- predict(svm_credit,newdata = credit_data)
confusionMatrix(svmPredict, credit_data$default)




#####Question 2#####

##Installing and Loading the "ROCR" library. It includes the functions to implement knn algorithm
install.packages("ROCR")
library(ROCR)


##Generating the roc curve for k nearest neighbor classification
##Predicting the probability of having a default value 'yes' from k nearest neighbor classification  
knnPredict_roc            <- predict(knn_credit,credit_data,type="prob")

##Prediction function combines the k nearest neighbor's estimated probability of not defaulting (Predict_roc[,2])
##and the actual default class (credit_data$default)
pred                      <- prediction( knnPredict_roc[,2], credit_data$default)

##Performance() function computes measures of performance on preciction object - pred
roc.perf = performance(pred, measure = "tpr", x.measure = "fpr")

##The preformance object obtained from the previous step is visualized using plot() function
plot(roc.perf, main="ROC curve", col="Blue", lwd=2, type="l" )

#Adding a diagonal line to the plot in the slope intercept form, a is the intercept and v is the slope
abline(a=0,b=1,lwd=2,lty=2)



##Generating the roc curve for C5.0 classification
##Predicting the probability of having a default value 'yes' from C5.0 classification
C5.0Predict_roc             <- predict(C5.0_credit,newdata = credit_data, type="prob")

##Prediction funciton combines the C5.0 classifier's estimated probability of not defaulting (Predict_roc[,2])
##and the actual default class (credit_data$default)
pred                        <- prediction( C5.0Predict_roc[,2], credit_data$default )

##Performance() function computes measures of performance on preciction object - pred
roc.perf = performance(pred, measure = "tpr", x.measure = "fpr")

##The preformance object obtained from the previous step is visualized using plot() function
plot(roc.perf, add=TRUE, main="ROC curve", col="Red", lwd=2, type="l")



##Generating the roc curve for support vector machines
##Predicting the probability of having a default value 'yes' from C5.0 classification
svmPredict_roc            <- predict(svm_credit,newdata = credit_data, type="prob")

##prediction funciton combines the support vector machines's estimated probability of not defaulting (Predict_roc[,2])
##and the actual default class (credit_data$default)
pred                      <- prediction( svmPredict_roc[,2], credit_data$default )

##Performance() function computes measures of performance on preciction object - pred
roc.perf = performance(pred, measure = "tpr", x.measure = "fpr")

##The preformance object obtained from the previous step is visualized using plot() function
plot(roc.perf, add=TRUE, main="ROC curve", col="Green", lwd=2, type="l")

#Adding the legends on the plot
legend("bottomright", legend=c("KNN", "C5.0","SVM"),
       lty=1:1, cex=0.8,col=c("blue", "red","green"))




#####Question 4#####
##Question 4.a##
##Building the C5 model using credit_data
set.seed(100)
control             <- trainControl(method = "cv", number=10)
model               <- train(default ~ ., data=credit_data, method="C5.0", preProcess="scale", trControl=control,
                             tuneGrid = expand.grid( .winnow = c(TRUE,FALSE), .trials=1, .model="tree" ))

##Estimatint the variable importance
importance          <- varImp(model, scale=FALSE)

##Summarize=ing the importance
print(importance)

##Plotting the importance
plot(importance)


##Question 4.b##
##Selecting the top five features obtained from the previous step Q.4a
svm_top5_features   <- credit_data[,c("credit_history","months_loan_duration", "housing", "job", "employment_duration","default")]

##Implementing Support vector machine on the dataset - svm_top5_features
set.seed(100)
svm_credit_top5     <- train(default ~ ., data=svm_top5_features, method = "svmLinear",
                             preProcess = c("center", "scale"),
                             trControl = trainControl(method = "cv", number=10))

#Generating the confusion matrix for the support vector machine implemented in the above step
svmPredict_top5     <- predict(svm_credit_top5,newdata = svm_top5_features)
confusionMatrix(svmPredict_top5, credit_data$default)



#####Question 5#####
##Loading the test_data from the "new_customers.csv" file, converting unknown values to 'NA' and loadings the strings as factors
new_customers_data   <- read.csv("new_customers.csv", stringsAsFactors = TRUE)

new_customers_data$credit_history       <- ordered(new_customers_data$credit_history, levels = c("critical", "poor", "good","very good","perfect"))
new_customers_data$employment_duration  <- ordered(new_customers_data$employment_duration, levels = c("unemployed" , "< 1 year", 
                                                                                                      "1 - 4 years", "4 - 7 years","> 7 years"))


#Removing the first column which is the Cust_ID since we dont require it for our analysis
new_customers_data   <- new_customers_data[,2:15]

##Predicting the classification of new customer based on k nearest neighbor
knnPredict                              <- predict(knn_credit,new_customers_data)
knnPredict
##Predicting the classification of new customer based on C5.0
C5.0Predict                             <- predict(C5.0_credit,new_customers_data)
C5.0Predict
##Predicting the classification of new customer based on svm
svmPredict                              <- predict(svm_credit,new_customers_data)
svmPredict

